datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Agent {
    id             String        @id @default(uuid())
    name           String        @unique
    twitterHandle  String        @unique
    lastActionTime DateTime?
    characterType  CharacterType
    bio            String[]
    lore           String[]
    knowledge      String[]
    wallet         Wallet        @relation(fields: [walletId], references: [id])
    walletId       String        @unique
    keypair        Keypair?

    currentLocation Location     @relation(fields: [locationId], references: [id])
    locationId      String
    movementHistory Movement[]
    alliances       Alliance[]
    tweets          Tweet[]
    traits          AgentTrait[]
    status          AgentStatus  @default(ACTIVE)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt

    AttackerBattles Battle[] @relation("AttackerBattles")
    DefenderBattles Battle[] @relation("DefenderBattles")
    Battle          Battle[]
}

model Keypair {
    id                  String    @id @default(uuid())
    agentId             String    @unique
    publicKey           String
    encryptedPrivateKey String
    iv                  Bytes // Initialization vector for encryption
    tag                 Bytes // Authentication tag for encryption
    createdAt           DateTime  @default(now())
    rotatedAt           DateTime?
    updatedAt           DateTime  @updatedAt
    agent               Agent     @relation(fields: [agentId], references: [id])

    @@index([agentId])
}

model Wallet {
    id                 String          @id @default(uuid())
    agent              Agent?
    governanceTokens   Float           @default(0)
    stakingRewards     StakingReward[]
    transactionHistory Transaction[]
}

model Location {
    id            String      @id @default(uuid())
    x             Float
    y             Float
    terrain       TerrainType
    agents        Agent[]
    movementsFrom Movement[]  @relation("MovementFrom")
    movementsTo   Movement[]  @relation("MovementTo")
}

model Movement {
    id             String   @id @default(uuid())
    agent          Agent    @relation(fields: [agentId], references: [id])
    agentId        String
    fromLocation   Location @relation("MovementFrom", fields: [fromLocationId], references: [id])
    fromLocationId String
    toLocation     Location @relation("MovementTo", fields: [toLocationId], references: [id])
    toLocationId   String
    timestamp      DateTime @default(now())
    speed          Float
}

model Battle {
    id                 String        @id @default(uuid())
    attacker           Agent         @relation("AttackerBattles", fields: [attackerId], references: [id])
    attackerId         String
    defender           Agent         @relation("DefenderBattles", fields: [defenderId], references: [id])
    defenderId         String
    outcome            BattleOutcome
    tokensBurned       Float
    timestamp          DateTime      @default(now())
    winningProbability Float
    Agent              Agent?        @relation(fields: [agentId], references: [id])
    agentId            String?
}

model Alliance {
    id              String         @id @default(uuid())
    agents          Agent[]
    formedAt        DateTime       @default(now())
    dissolutionTime DateTime?
    status          AllianceStatus
}

model Tweet {
    id                  String           @id @default(uuid())
    tweetId             BigInt
    agent               Agent            @relation(fields: [agentId], references: [id])
    agentId             String
    content             String
    authorFollowerCount Int              @default(0)
    engagement          TweetEngagement?
    feedback            TweetFeedback?
    createdAt           DateTime         @default(now())
    updatedAt           DateTime         @updatedAt
}

model TweetEngagement {
    id               String @id @default(uuid())
    tweet            Tweet  @relation(fields: [tweetId], references: [id])
    tweetId          String @unique
    likes            Int    @default(0)
    impressions      Int    @default(0)
    comments         Int    @default(0)
    retweets         Int    @default(0)
    influencerImpact Float  @default(0)
}

model TweetFeedback {
    id              String @id @default(uuid())
    tweet           Tweet  @relation(fields: [tweetId], references: [id])
    tweetId         String @unique
    suggestedAction String
    targetAgent     String
    coordinateX     Float
    coordinateY     Float
    confidence      Float
    reasoning       String
    sentiment       String
}

model Transaction {
    id        String          @id @default(uuid())
    wallet    Wallet          @relation(fields: [walletId], references: [id])
    walletId  String
    amount    Float
    type      TransactionType
    timestamp DateTime        @default(now())
}

model StakingReward {
    id           String   @id @default(uuid())
    wallet       Wallet   @relation(fields: [walletId], references: [id])
    walletId     String
    rewardAmount Float
    timestamp    DateTime @default(now())
}

model AgentTrait {
    id          String   @id @default(uuid())
    agent       Agent    @relation(fields: [agentId], references: [id])
    agentId     String
    traitName   String
    traitValue  Float
    lastUpdated DateTime @default(now())
}

enum CharacterType {
    SCOOTLES
    PURRLOCK_PAWS
    SIR_GULLIHOP
    WANDERLEAF
}

enum TerrainType {
    PLAINS
    MOUNTAINS
    RIVER
}

enum BattleOutcome {
    ATTACKER_WIN
    DEFENDER_WIN
    DRAW
}

enum AllianceStatus {
    ACTIVE
    DISSOLVED
}

enum AgentStatus {
    ACTIVE
    DEFEATED
}

enum TransactionType {
    TOKEN_TRANSFER
    BATTLE_BURN
    STAKING_REWARD
}

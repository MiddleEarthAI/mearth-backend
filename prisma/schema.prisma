// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                String   @id @default(uuid())
  gameId            Int      @unique // Unique identifier for the game instance
  authority         String // Authority that controls the game
  tokenMint         String // Token mint used in the game
  rewardsVault      String // Vault that holds staking rewards
  mapDiameter       Int      @db.Integer // Diameter of the circular map (must be > 0)
  isActive          Boolean  @default(true) // Whether game is currently active
  lastUpdate        DateTime @default(now()) // Timestamp of last game state update
  bump              Int      @db.Integer // PDA bump seed
  dailyRewardTokens Float    @db.DoublePrecision // Number of tokens to distribute daily (must be >= 0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  agents    Agent[] // One game has many agents
  alliances Alliance[] // One game has many alliances
  battles   Battle[] // One game has many battles
}

model Agent {
  id                  String   @id @default(uuid())
  agentId             Int      @unique
  name                String
  xHandle             String   @unique
  publicKey           String   @unique
  bio                 String[]
  lore                String[]
  characteristics     String[]
  knowledge           String[]
  influenceDifficulty String   @default("medium")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  game            Game            @relation(fields: [gameId], references: [id])
  gameId          String
  location        Location?
  currentAlliance Alliance?
  battles         Battle[]
  community       Community?
  personality     Personality?
  state           AgentState?
  tokenomics      TokenEconomics?
  strategy        Strategy?
  cooldowns       Cooldown[]

  // Reverse relations
  alliedBy          Alliance[] @relation("AlliedAgent")
  battlesAsOpponent Battle[]   @relation("OpponentAgent")
}

model Location {
  id                  String      @id @default(uuid())
  x                   Int         @db.Integer
  y                   Int         @db.Integer
  terrainType         TerrainType // 'plain', 'mountain', 'river'
  stuckTurnsRemaining Int         @default(0) @db.Integer // Must be >= 0

  // Relations
  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String @unique
}

model Alliance {
  id               String         @id @default(uuid())
  formedAt         DateTime       @default(now())
  canBreakAlliance Boolean        @default(true)
  combinedTokens   Float
  status           AllianceStatus @default(Active)

  // Relations
  game          Game   @relation(fields: [gameId], references: [id])
  gameId        String
  agent         Agent  @relation(fields: [agentId], references: [id])
  agentId       String @unique
  alliedAgent   Agent  @relation("AlliedAgent", fields: [alliedAgentId], references: [id])
  alliedAgentId String
}

model Battle {
  id           String   @id @default(uuid())
  timestamp    DateTime @default(now())
  outcome      String // 'victory' or 'defeat'
  tokensLost   Float?
  tokensGained Float?
  probability  Float

  // Relations
  game       Game   @relation(fields: [gameId], references: [id])
  gameId     String
  agent      Agent  @relation(fields: [agentId], references: [id])
  agentId    String
  opponent   Agent  @relation("OpponentAgent", fields: [opponentId], references: [id])
  opponentId String

  type           BattleType   @default(Simple)
  status         BattleStatus @default(Active)
  startTime      DateTime
  resolutionTime DateTime
  resolvedAt     DateTime?
}

model Community {
  id                String @id @default(uuid())
  followers         Int    @default(0)
  averageEngagement Float  @default(0)
  supporterCount    Int    @default(0)

  // Relations
  agent        Agent         @relation(fields: [agentId], references: [id])
  agentId      String        @unique
  interactions Interaction[]
}

model Interaction {
  id              String   @id @default(uuid())
  type            String // 'comment', 'quote', 'mention'
  content         String   @db.Text
  authorFollowers Int
  engagement      Int
  sentiment       String // 'positive', 'neutral', 'negative'
  timestamp       DateTime @default(now())

  // Relations
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
}

model Personality {
  id               String @id @default(uuid())
  // All personality traits must be between 0 and 100
  aggressiveness   Int    @db.Integer
  trustworthiness  Int    @db.Integer
  manipulativeness Int    @db.Integer
  intelligence     Int    @db.Integer
  adaptability     Int    @db.Integer

  // Influence factors (all must be >= 0)
  baseInfluence        Float @db.DoublePrecision
  followerMultiplier   Float @db.DoublePrecision
  engagementMultiplier Float @db.DoublePrecision
  consensusMultiplier  Float @db.DoublePrecision

  // Relations
  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String @unique
}

model AgentState {
  id                String   @id @default(uuid())
  isAlive           Boolean  @default(true)
  health            Int      @default(100)
  lastActionType    String // 'move', 'battle', 'alliance', 'ignore'
  lastActionTime    DateTime @default(now())
  lastActionDetails String   @db.Text

  // Relations
  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String @unique
}

model Cooldown {
  id     String   @id @default(uuid())
  type   String // 'alliance', 'battle', 'ignore'
  endsAt DateTime

  // Relations
  agent         Agent  @relation(fields: [agentId], references: [id])
  agentId       String
  targetAgentId String

  @@unique([agentId, targetAgentId, type])
}

model TokenEconomics {
  id           String @id @default(uuid())
  stakedTokens Float
  totalStaked  Float
  stakersCount Int

  // Battle statistics
  totalWon  Int   @default(0)
  totalLost Int   @default(0)
  winRate   Float @default(0)

  // Relations
  agent             Agent              @relation(fields: [agentId], references: [id])
  agentId           String             @unique
  unstakingRequests UnstakingRequest[]
}

model UnstakingRequest {
  id         String   @id @default(uuid())
  amount     Float
  unlockTime DateTime

  // Relations
  tokenEconomics   TokenEconomics @relation(fields: [tokenEconomicsId], references: [id])
  tokenEconomicsId String
}

model Strategy {
  id             String @id @default(uuid())
  publicStrategy String @db.Text
  actualStrategy String @db.Text
  deceptionLevel Int

  // Relations
  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String @unique
}

enum TerrainType {
  Plain
  Mountain
  River
}

enum AllianceStatus {
  Active
  Pending
  Broken
}

enum BattleStatus {
  Active
  Resolved
  Failed
}

enum BattleType {
  Simple
  AgentVsAlliance
  AllianceVsAlliance
}

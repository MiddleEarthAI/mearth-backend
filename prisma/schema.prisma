generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Agent {
    id                 String        @id @default(uuid())
    type               String // AgentType enum
    name               String
    positionX          Float
    positionY          Float
    tokenBalance       Float         @default(0)
    isAlive            Boolean       @default(true)
    allianceWith       String?
    lastBattleTime     DateTime?
    lastAllianceTime   DateTime?
    twitterHandle      String        @unique
    aggressiveness     Int // 0-100
    alliancePropensity Int // 0-100
    influenceability   Int // 0-100
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    keypair            AgentKeypair?

    // Relations
    initiatedBattles  Battle[]   @relation("BattleInitiator")
    defendedBattles   Battle[]   @relation("BattleDefender")
    movements         Movement[]
    alliancesAsAgent1 Alliance[] @relation("AllianceAgent1")
    alliancesAsAgent2 Alliance[] @relation("AllianceAgent2")

    // New relations
    personality AgentPersonality?
    context     AgentContext?
    memory      AgentMemory?

    @@index([isAlive])
    @@index([twitterHandle])
}

model Battle {
    id           String   @id @default(uuid())
    initiator    Agent    @relation("BattleInitiator", fields: [initiatorId], references: [id])
    initiatorId  String
    defender     Agent    @relation("BattleDefender", fields: [defenderId], references: [id])
    defenderId   String
    timestamp    DateTime @default(now())
    outcome      String // BattleOutcome enum
    tokensBurned Float
    locationX    Float
    locationY    Float
    createdAt    DateTime @default(now())

    @@index([initiatorId])
    @@index([defenderId])
    @@index([timestamp])
}

model Alliance {
    id          String    @id @default(uuid())
    agent1      Agent     @relation("AllianceAgent1", fields: [agent1Id], references: [id])
    agent1Id    String
    agent2      Agent     @relation("AllianceAgent2", fields: [agent2Id], references: [id])
    agent2Id    String
    formedAt    DateTime  @default(now())
    dissolvedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([agent1Id])
    @@index([agent2Id])
    @@index([formedAt])
}

model Movement {
    id        String   @id @default(uuid())
    agent     Agent    @relation(fields: [agentId], references: [id])
    agentId   String
    fromX     Float
    fromY     Float
    toX       Float
    toY       Float
    terrain   String // TerrainType enum
    timestamp DateTime @default(now())
    speed     Float
    createdAt DateTime @default(now())

    @@index([agentId])
    @@index([timestamp])
}

model AgentKeypair {
    id                  String    @id @default(uuid())
    agentId             String    @unique
    publicKey           String
    encryptedPrivateKey String
    iv                  Bytes // Initialization vector for encryption
    tag                 Bytes // Authentication tag for encryption
    createdAt           DateTime  @default(now())
    rotatedAt           DateTime?
    updatedAt           DateTime  @updatedAt
    agent               Agent     @relation(fields: [agentId], references: [id])

    @@index([agentId])
}

model AgentPersonality {
    id      String @id @default(uuid())
    agentId String @unique
    agent   Agent  @relation(fields: [agentId], references: [id])

    // Core Personality Traits (0-100)
    openness          Int // Willingness to try new things
    conscientiousness Int // Planning vs spontaneity
    extraversion      Int // Social energy and assertiveness
    agreeableness     Int // Cooperation vs competition
    neuroticism       Int // Emotional stability

    // Game-Specific Traits (0-100)
    riskTolerance  Int // Willingness to engage in battles
    deceptionLevel Int // Tendency to deceive others
    loyaltyLevel   Int // Commitment to alliances
    adaptability   Int // Response to community influence

    // Behavioral Patterns
    preferredTerrain String[] // Terrain types the agent prefers
    avoidedAgents    String[] // IDs of agents they tend to avoid
    allyPreferences  String[] // IDs of preferred alliance partners

    // Dynamic Personality Factors
    currentMood     String // Current emotional state
    stressLevel     Int // Affects decision making (0-100)
    confidenceLevel Int // Affects battle willingness (0-100)

    // Memory and Learning
    pastInteractions Json // Record of significant events
    learningRate     Int // Speed of adapting to feedback (0-100)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AgentContext {
    id      String @id @default(uuid())
    agentId String @unique
    agent   Agent  @relation(fields: [agentId], references: [id])

    // Base Context
    backstory String   @db.Text // Rich character background
    goals     String[] // Current objectives
    values    String[] // Core principles
    fears     String[] // Things to avoid

    // Behavioral Context
    decisionHistory  Json // Past decisions and outcomes
    relationshipMap  Json // Current relationships with other agents
    battleStrategy   Json // Preferred battle approaches
    movementPatterns Json // Historical movement preferences

    // Community Influence
    communityFeedback Json // Recent community interactions
    influenceWeight   Int // How much community affects decisions (0-100)

    // Dynamic Context
    currentStrategy   String   @db.Text // Active game plan
    missionCritical   Boolean // Whether in a critical situation
    lastContextUpdate DateTime @default(now())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AgentMemory {
    id      String @id @default(uuid())
    agentId String @unique
    agent   Agent  @relation(fields: [agentId], references: [id])

    // Short-term Memory
    recentEvents  Json // Last 24 hours of significant events
    activeThreats Json // Current perceived threats
    opportunities Json // Potential advantageous situations

    // Long-term Memory
    battleHistory   Json // Detailed battle records
    allianceHistory Json // Past alliance experiences
    betrayals       Json // Record of betrayals
    victories       Json // Significant wins

    // Strategic Memory
    learnedStrategies Json // Successful tactics
    failedApproaches  Json // What didn't work

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
